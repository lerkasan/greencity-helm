# fullnameOverride: frontend
# backend_services:
#   - path: /backcore/
#     pathType: Prefix
#     backend:
#       service:
#         name: greencity-backcore-backcore
#         port:
#           number: 8080
#   - path: /backuser/
#     pathType: Prefix
#     backend:
#       service:
#         name: greencity-backuser-backuser
#         port:
#           number: 8060

namespace: greencity
replicaCount: 2
annotations:
  argocd.argoproj.io/sync-wave: "3"
labels:
  app: greencity
  tier: frontend
  name: nginx
selectorLabels:
  app: greencity
  tier: frontend
podLabels:
  app: greencity
  tier: frontend
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 50%
    maxUnavailable: 50%
restartPolicy: Always
image:
  repository: 084912621610.dkr.ecr.us-east-1.amazonaws.com/greencity/frontend
  tag: 0.0.0-e3d79444c7878aafecc2b15a3670a3e077947c8f
  sha256: sha256:a3f368402aaa8f03ceed223b1f4e595699a484e778014ef84b64ba5ea640b495
  pullPolicy: IfNotPresent
imagePullSecrets: []
containerName: frontend
resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 250m
    memory: 256Mi
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  seccompProfile:
    type: RuntimeDefault
  sysctls:
    - name: net.ipv4.ip_unprivileged_port_start
      value: "1"
podSecurityContext:
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  allowPrivilegeEscalation: false
  # appArmorProfile:
  #   type: RuntimeDefault
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop:
      - ALL
volumes:
  - name: nginx-conf
    configMap:
      name: greencity-frontend-greencity-frontend
      items:
        - key: nginx.conf
          path: nginx.conf
  - name: nginx-cache
    emptyDir:
      sizeLimit: 500Mi
  - name: tmpfs
    emptyDir:
      sizeLimit: 300Mi
volumeMounts:
  - name: nginx-conf
    mountPath: /etc/nginx/nginx.conf
    subPath: nginx.conf
    readOnly: true
  - name: nginx-cache
    mountPath: /var/cache/nginx
  - name: tmpfs
    mountPath: /tmp
service:
  host: lerkasan.net
  type: ClusterIP
  port: 80
ingress:
  ingressClassName: alb
  annotations:
    alb.ingress.kubernetes.io/load-balancer-name: greencity-ingress-alb
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/group.name: greencity-ingress-group
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:084912621610:certificate/5f7452ec-e5e4-41f4-8233-be06cdff0d7c
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=60
    external-dns.alpha.kubernetes.io/hostname: lerkasan.net
  tls:
    - hosts:
        - lerkasan.net
livenessProbe:
  httpGet:
    port: 80
    path: /health
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 15
  failureThreshold: 5
readinessProbe:
  httpGet:
    port: 80
    path: /health
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 15
  failureThreshold: 5
configMapData:
  nginx.conf: "user  nginx;\nworker_processes  auto;\n\nerror_log  /var/log/nginx/error.log notice;\npid        /tmp/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    # include /etc/nginx/conf.d/*.conf;\n\n  # server {\n  #   listen 80 default_server;\n  #   listen [::]:80 ipv6only=on default_server;\n  #   server_name _;\n\n  #   location /health {\n  #     allow all;\n  #     return 200;\n  #   }\n\n  #   deny all;\n  # }\n\n  server {\n    listen 81;\n\n    location /nginx_status {\n      stub_status on;\n    }\n\n    location / {\n      return 404;\n    }\n  }\n\n  server {\n    listen 80;\n\n    server_name lerkasan.net greencity.local;\n\n    ssi off;\n    server_tokens off; # hides version on 404 or 500 pages\n\n    # Proxy headers\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_hide_header X-Powered-By;  # Hide upstream proxy headers\n    # End Proxy headers\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\";  # avoid clickjacking\n    # add_header X-Frame-Options \"DENY\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self'; img-src 'self' data:; media-src 'self' blob: data: https://lerkasan.net; http://lerkasan.net; http://greencity.local style-src 'self' data: https://fonts.googleapis.com fonts.googleapis.com https://use.fontawesome.com use.fontawesome.com 'unsafe-inline'; font-src 'self' data: https://fonts.googleapis.com fonts.googleapis.com https://use.fontawesome.com use.fontawesome.com; frame-src 'self'; connect-src 'self' https://lerkasan.net http://lerkasan.net http://greencity.local https://apis.google.com; object-src 'none' \";\n    add_header X-Content-Type-Options nosniff;\n    # End Security headers\n\n    # Buffer policy\n    client_body_buffer_size 1K;\n    client_header_buffer_size 1k;\n    client_max_body_size 20M;              # 1k, increase it if receiving file uploads via the POST method\n    large_client_header_buffers 2 1k;\n    # End Buffer policy\n\n    # Timeouts\n    client_body_timeout   10;\n    client_header_timeout 10;\n    keepalive_timeout     5 5;\n    send_timeout          10;\n    # End Timeouts\n\n    # Block bots, scanners, etc.\n    if ($http_user_agent ~* LWP::Simple|BBBike|msnbot|scrapbot) {\n      return 403;\n    }\n    # End block bots\n\n    # Only GET, POST, PUT, DELETE, HEAD requests are allowed\n    if ( $request_method !~ ^(GET|POST|PUT|DELETE|HEAD)$ ) {\n      return 405;\n    }\n    # End HTTP Methods\n\n    # Only requests to lerkasan.net domain are allowed\n    # if ($host !~ ^(${NGINX_HOST}|${PRIVATE_IP}|localhost|greencity.local|lerkasan.net)$ ) {\n    #   return 444;\n    # }\n\n    # if ($http_host !~ ^(${NGINX_HOST}|${PRIVATE_IP}|localhost|greencity.local|lerkasan.net)$ ) {\n    #   return 444;\n    # }\n    #\n\n    error_page 404 /error.html;\n\n    location /health {\n      allow all;\n      return 200;\n    }\n\n    # Frontend\n    location / {\n      add_header 'Access-Control-Allow-Origin' '*';\n      root /var/www/app;\n      index index.html index.htm;\n      set $fallback_file /index.js.html;\n      try_files $uri $uri/ /index.html;\n      autoindex off;\n\n      limit_except GET HEAD POST { deny all; }\n    }\n\n    # BackCore\n    location /backcore/ {\n      proxy_pass http://greencity-backcore-greencity-backcore:8080/;\n      proxy_redirect off;\n      autoindex off;\n\n      limit_except GET HEAD POST PUT DELETE { deny all; }\n    }\n\n      # BackCore\n    location /backuser/ {\n      proxy_pass http://greencity-backuser-greencity-backuser:8060/;\n      proxy_redirect off;\n      autoindex off;\n\n      limit_except GET HEAD POST PUT DELETE { deny all; }\n    }\n\n\n    #   # Socket\n    # location /socket/ {\n    #   proxy_pass http://backcore:8080/socket;\n    #   proxy_redirect off;\n    #   autoindex off;\n\n    #   limit_except GET HEAD POST PUT DELETE { deny all; }\n    # }\n    \n    location ~ /\\.git.* {\n      deny all;\n    }\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n    location ~ /\\.(.*)/?(.*)? {\n        deny all;\n    }\n  }\n}"
